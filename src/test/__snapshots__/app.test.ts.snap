// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generateDockerfile should generate dockerfile create-react-app 1`] = `
"#>>dogen
FROM alpine:3.12 AS jq
RUN apk add --update --no-cache jq

FROM node:latest AS node-base

# Extract minimal fields for dependencies installation
# This step avoid reinstalling node_modules due to field that is unrelated
FROM jq AS extract-pkg-deps
COPY package.json /tmp/package.json
RUN jq '{name, dependencies, devDependencies}' < /tmp/package.json > /tmp/deps.json

# Install node_modules
FROM node-base AS install-modules
WORKDIR /service
COPY --from=extract-pkg-deps /tmp/deps.json package.json
COPY yarn.lock yarn.lock
RUN yarn install --pure-lockfile --non-interactive --cache-folder ./.ycache && rm -rf ./.ycache

# Build
FROM node-base AS build
WORKDIR /service
COPY --from=install-modules /service/node_modules node_modules
COPY package.json package.json
COPY tsconfig.json tsconfig.json
CMD yarn build

FROM nginx:stable-alpine AS serve
COPY --from=build /service/build /service/build
RUN echo -e -n "server {\\n\\
  listen       80;\\n\\
  server_name  localhost;\\n\\
\\n\\
  location / {\\n\\
      root   /usr/share/nginx/html;\\n\\
      index  index.html index.htm;\\n\\
      try_files $uri /index.html;\\n\\
  }\\n\\
\\n\\
  error_page   500 502 503 504  /50x.html;\\n\\
  location = /50x.html {\\n\\
      root   /usr/share/nginx/html;\\n\\
  }\\n\\
" > /etc/nginx/conf.d/default.conf
EXPOSE 80
#<<dogen
"
`;

exports[`generateDockerfile should generate dockerfile for vite app 1`] = `
"#dogen
FROM alpine:3.12 AS jq
RUN apk add --update --no-cache jq

FROM node:latest AS node-base

# Extract minimal fields for dependencies installation
# This step avoid reinstalling node_modules due to field that is unrelated
FROM jq AS extract-pkg-deps
COPY package.json /tmp/package.json
RUN jq '{name, dependencies, devDependencies}' < /tmp/package.json > /tmp/deps.json

# Install node_modules
FROM node-base AS install-modules
WORKDIR /service
COPY --from=extract-pkg-deps /tmp/deps.json package.json
COPY yarn.lock yarn.lock
RUN yarn install --pure-lockfile --non-interactive --cache-folder ./.ycache && rm -rf ./.ycache

# Build
FROM node-base AS build
WORKDIR /service
COPY --from=install-modules /service/node_modules node_modules
COPY package.json package.json
COPY tsconfig.json tsconfig.json
COPY vite.config.ts vite.config.ts
COPY tsconfig.node.json tsconfig.node.json
CMD yarn build

FROM nginx:stable-alpine AS serve
COPY --from=build /service/dist /service/dist
RUN echo -e -n "server {\\n\\
  listen       80;\\n\\
  server_name  localhost;\\n\\
\\n\\
  location / {\\n\\
      root   /usr/share/nginx/html;\\n\\
      index  index.html index.htm;\\n\\
      try_files $uri /index.html;\\n\\
  }\\n\\
\\n\\
  error_page   500 502 503 504  /50x.html;\\n\\
  location = /50x.html {\\n\\
      root   /usr/share/nginx/html;\\n\\
  }\\n\\
" > /etc/nginx/conf.d/default.conf
EXPOSE 80
#enddogen
"
`;
